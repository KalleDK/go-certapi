on:
  push:
    tags:
    - 'v*'

name: Upload Release Asset

jobs:
  create_release:
    name: Create Relase
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
  build:
    name: Build with musl
    needs: create_release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, "386"]
        dockertag: [latest]
        include:
          - goos: linux
            goarch: amd64
            dockertag: alpine
          - goos: linux
            goarch: 386
            dockertag: alpine
    steps:
    - name: Checkout source code
      uses: actions/checkout@v2
    - name: Build Project
      uses: docker://golang:${{ matrix.dockertag }}
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      with:
        args: go build ./cmd/certmgr
    - name: Pack artifacts
      id: pack_artifacts
      run: |
        RELEASE_TAG=$(basename ${GITHUB_REF})
        LIBC=$(if [ "${{ matrix.dockertag }}" = "alpine" ]; then echo "musl"; else echo "glibc"; fi)
        MEDIA_TYPE=$(if [ "${{ matrix.goos }}" = "windows" ]; then echo "application/zip"; else echo "application/gzip"; fi)
        BINARY_NAME=certmgr
        BINARY_EXT=$(if [ "${{ matrix.goos }}" = "windows" ]; then echo ".exe"; else echo ""; fi)
        BINARY=${BINARY_NAME}${BINARY_EXT}
        RELEASE_ASSET_NAME=${BINARY_NAME}-${RELEASE_TAG}-${{ matrix.goos }}-${{ matrix.goarch }}-${LIBC}
        RELEASE_ASSET_EXT=$(if [ "${{ matrix.goos }}" = "windows" ]; then echo ".zip"; else echo ".tar.gz"; fi)
        RELEASE_ASSET=${RELEASE_ASSET_NAME}${RELEASE_ASSET_EXT}
        BUILD_ARTIFACTS_FOLDER=build-artifacts-$(date +%s)
        mkdir -p ${BUILD_ARTIFACTS_FOLDER}
        cp ${BINARY} ${BUILD_ARTIFACTS_FOLDER}/
        cd ${BUILD_ARTIFACTS_FOLDER}
        tar cvfz ${RELEASE_ASSET} *
        sha256sum ${RELEASE_ASSET} | cut -d ' ' -f 1 > ${RELEASE_ASSET}.sha256
        md5sum ${RELEASE_ASSET} | cut -d ' ' -f 1 > ${RELEASE_ASSET}.md5
        RELEASE_ASSET_PATH=${BUILD_ARTIFACTS_FOLDER}/${RELEASE_ASSET}
        echo ::set-output release_asset::${RELEASE_ASSET}
        echo ::set-output release_asset_name::${RELEASE_ASSET_NAME}
        echo ::set-output release_asset_path::${RELEASE_ASSET_PATH}
        echo ::set-output media_type::${MEDIA_TYPE}
    - name: Upload Assets
      uses: actions/upload-artifact@v2
      with:
        name: ${{ steps.pack_artifacts.output.release_asset_name }}
        path: |
          ${{ steps.pack_artifacts.output.release_asset_path }}
          ${{ steps.pack_artifacts.output.release_asset_path }}.sha256
          ${{ steps.pack_artifacts.output.release_asset_path }}.md5
    - name: Uploade Release Files
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_name: ${{ steps.pack_artifacts.output.release_asset }}
        asset_path: ${{ steps.pack_artifacts.output.release_asset_path }}
        asset_content_type: ${{ steps.pack_artifacts.output.media_type }}
